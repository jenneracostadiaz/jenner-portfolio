---
import Layout from './Layout.astro';
import TextGradient from '../components/elements/TextGradient.astro';
import { CldImage } from 'astro-cloudinary';
import Github from '../components/icons/Icons/Github.astro';
import Image from 'astro/components/Image.astro';
import Markdown from '../components/library/Markdown.astro';
import { v2 as cloudinary } from 'cloudinary';

const { frontmatter } = Astro.props;

const ogImageUrl = `https://res.cloudinary.com/${import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME}/image/upload/c_fill,w_1200,h_630/${frontmatter.imageCover}.jpg`;

cloudinary.config({
    cloud_name: import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME,
    api_key: import.meta.env.PUBLIC_CLOUDINARY_API_KEY,
    api_secret: import.meta.env.CLOUDINARY_API_SECRET,
});

const extractAltFromPublicId = (publicId: string): string => {
    const baseName = publicId.split('/').pop().split('.')[0];
    return baseName
        .replace(/[-_]/g, ' ')
        .replace(/\w\S*/g, (word: string) => (
            word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
        ));
};

const result = await cloudinary.api.resources({
    type: 'upload',
    prefix: frontmatter.gallery + '/',
    max_results: 500,
    context: true,
    metadata: true,
});

const images = result.resources.map((resource: {
    context?: {
        custom?: {
            alt?: string;
            caption?: string;
        };
    };
    metadata?: {
        alt?: string;
    };
    public_id: string;
    width: number;
    height: number;
    format: string;
}) => {
    let altText = '';

    if (resource.context && resource.context.custom && resource.context.custom.alt) {
        altText = resource.context.custom.alt;
    } else if (resource.context && resource.context.custom && resource.context.custom.caption) {
        altText = resource.context.custom.caption;
    } else if (resource.metadata && resource.metadata.alt) {
        altText = resource.metadata.alt;
    } else {
        altText = extractAltFromPublicId(resource.public_id);
    }

    if (!altText) {
        altText = `${frontmatter.title} - imagen`;
    }

    return {
        public_id: resource.public_id,
        alt: altText,
        width: resource.width,
        height: resource.height,
        format: resource.format,
    };
});
---

<Layout title={`${frontmatter.title} - Project`} description={frontmatter.description} image={ogImageUrl}>
    <section class="w-11/12 max-w-6xl mx-auto my-36 text-neutral-300/80 flex flex-col gap-12">

        <div class="grid lg:grid-cols-5 items-center gap-8">
            <div class="col-span-2 flex flex-col gap-4">
                <div class="flex flex-col">
                    <h1 class="text-5xl font-bold">
                        <TextGradient class="from-neutral-300/80 to-neutral-500/70">{frontmatter.title}</TextGradient>
                    </h1>
                    <p class="text-xs font-medium text-neutral-300">{frontmatter.role}</p>
                </div>
                <div>
                    <p class="font-light">{frontmatter.description}</p>
                    <p class="text-sm font-medium text-neutral-300">Client: {frontmatter.company}</p>
                </div>
                <div
                    class="flex flex-wrap gap-2 max-w-10/12">
                    {
                        frontmatter.tech.map((tech: string) => (
                            <a
                                href={`/portfolio?tech=${tech}`}
                                class="text-neutral-300/90 hover:text-neutral-100 transition-colors duration-300
                                         font-mono text-xs py-1 px-2 rounded bg-neutral-800/50 hover:bg-neutral-700/60
                                         border border-neutral-700/50 hover:border-neutral-600/80
                                         before:content-['<'] before:mr-1 before:opacity-70
                                         after:content-['/>'] after:ml-1 after:opacity-70"
                            >
                                {tech}
                            </a>
                        ))
                    }
                </div>
            </div>
            <div class="col-span-3 flex">
                <CldImage
                    src={frontmatter.imageCover}
                    alt={frontmatter.title}
                    width={1200}
                    height={685}
                    class="rounded-2xl shadow-2xl shadow-neutral-700/50"
                />
            </div>
        </div>

        <aside
            class="flex justify-between items-center gap-4 p-4 font-light text-xs bg-neutral-800 rounded-lg shadow-md outline-4 outline-neutral-400/15 hover:shadow-2xl hover:shadow-neutral-800 transition-shadow duration-500">
            <nav class="flex gap-4 items-center">
                <span
                    class="bg-gradient-to-r from-primary-700 to-primary-500 text-neutral-300 text-xs font-light px-2 py-1 rounded-md">
                    {frontmatter.category}
                </span>
                <p>{frontmatter.date} / {frontmatter.duration}</p>
            </nav>
            <nav class="flex-1 flex justify-center gap-2">
                <a href="#overview">Overview</a>|<a href="#gallery">Gallery</a>
            </nav>
            <nav class="flex gap-2 items-center">
                <p>External Links:</p>
                <a href={frontmatter.demoLink} target="_blank">{frontmatter.demoLink}</a>
                <a href={frontmatter.gitHub} target="_blank" class="bg-neutral-900">
                    <Github size="sm" class="fill-neutral-400" />
                </a>
                <a href={frontmatter.deepWiki} target="_blank">
                    <Image
                        src="https://deepwiki.com/icon.png"
                        alt="Deep Wiki Info"
                        width={16}
                        height={16}
                        loading="eager"
                    />
                </a>
            </nav>
        </aside>
        <Markdown>
            <slot />
        </Markdown>
        <section id="gallery" class="grid gap-4 pt-4">
            {
                images.map((image: { public_id: string; alt: string; }, index: number) => (
                    <div class="image-container relative overflow-hidden rounded-xl">
                        <CldImage
                            src={image.public_id}
                            alt={image.alt || `${frontmatter.title} imagen ${index + 1}`}
                            width={1152}
                            height={648}
                            class="rounded-xl"
                            loading={index < 6 ? 'eager' : 'lazy'}

                        />
                        <div class="absolute bottom-0 w-full bg-black bg-opacity-60 p-2 text-white text-sm">
                            {image.alt}
                        </div>

                    </div>
                ))
            }
        </section>
    </section>
</Layout>
